topPlayers[value+j,21] <- ifelse(topPlayers[value+j,20]==max(topPlayers[(value):(value+c[match(value,b)]),20]),
1,0)
}
}
cm <- table(topPlayers$MVP,topPlayers$V21)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
topPlayersTest$mvp_glm_test6 <- predict(mvp_glm, topPlayersTest[, c('PS.G','AST', 'Wins')], type="response")
topPlayersTest$mvp_glm_test6[is.na(topPlayersTest$mvp_glm_test6)]<- 0
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,21] <- ifelse(topPlayersTest[value+j,20]==max(topPlayersTest[(value):(value+c[match(value,b)]),20]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V21)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
library(randomForest)
mvp_ranForest <- randomForest(MVP ~ GS + PS.G + TRB + AST + STL + BLK + TOV +
OBPM + DBPM + Wins, data = topPlayers)
summary(mvp_ranForest)
topPlayers$mvp_rf <- predict(mvp_ranForest, topPlayers[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM', 'Wins')], type="response")
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,23] <- ifelse(topPlayers[value+j,22]==
max(topPlayers[(value):(value+c[match(value,b)]),22]),
1,0)
}
}
m1cm <- table(topPlayers$MVP,topPlayers$V23)
m1error <- (m1cm[1,2]+m1cm[2,1])/(sum(m1cm[,1])+sum(m1cm[,2]))
m1cm
m1error
mvp_glm.test = predict(mvp_ranForest, topPlayersTest[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM','Wins')], type="response")
topPlayersTest$rftest <- mvp_glm.test
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,23] <- ifelse(topPlayersTest[value+j,22]==max(topPlayersTest[(value):(value+c[match(value,b)]),22]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V23)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
trueMVP = mvpRanks %>%
filter(MVP == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod1 = rbind(topPlayers,topPlayersTest) %>%
filter(V15 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod2 = rbind(allPlayersTrain,allPlayersTest) %>%
filter(V15 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod3 = rbind(topPlayers,topPlayersTest) %>%
filter(V17 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod4 = rbind(topPlayers,topPlayersTest) %>%
filter(V19 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod5 = rbind(allPlayersTrain,allPlayersTest) %>%
filter(V17 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod6 = rbind(topPlayers,topPlayersTest) %>%
filter(V21 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
mvpByMethod7 = rbind(topPlayers,topPlayersTest) %>%
filter(V23 == 1) %>%
group_by(season_end) %>%
select(season_end,player)
compareMVP <- cbind(trueMVP, mvpByMethod1, mvpByMethod2, mvpByMethod3,
mvpByMethod4, mvpByMethod5, mvpByMethod6)
compareMVP <- compareMVP[,-c(3,5,7,9,11,13,15)]
compareMVP <- compareMVP[,-c(3,5,7,9,11,13)]
compareMVP <- cbind(trueMVP, mvpByMethod1, mvpByMethod2, mvpByMethod3,
mvpByMethod4, mvpByMethod5, mvpByMethod6, mvpByMethod7)
compareMVP <- compareMVP[,-c(3,5,7,9,11,13,15)]
write.csv(compareMVP,"compareMVP")
write.csv(compareMVP,"compareMVP.csv")
library(tidyverse)
teamBox = read.csv('nba-enhanced-stats/2016-17_teamBoxScore.csv')
playerBox17 = read.csv('nba-enhanced-stats/2016-17_playerBoxScore.csv')
playerBox18 = read.csv('nba-enhanced-stats/2017-18_playerBoxScore.csv')
playerBox17_df = data.frame(playerBox17)
replace(playerBox17_df, is.na(playerBox17_df), "000/000")
playerBox18_df = data.frame(playerBox17)
replace(playerBox18_df, is.na(playerBox18_df), "000/000")
playerInfo_lm <- glm(playerBox17_df$teamRslt ~ playerBox17_df$playPTS+ playerBox17_df$playAST+ playerBox17_df$playTO+ playerBox17_df$playBLK+ playerBox17_df$playSTL+ playerBox17_df$playPF+ playerBox17_df$playFGA,family = binomial)
summary(playerInfo_lm)
step(playerInfo_lm)
player_pred <-predict(playerInfo_lm,playerBox18_df$teamRslt)
length(playerBox18$teamRslt)
length(player_pred)
table(playerBox18$teamRslt, player_pred)
mvpPredictions = playerBox17 %>%
group_by(playDispNm) %>%
mutate(blkPerGame = mean(playBLK),
trbPerGame = mean(playTRB),
stlPerGame = mean(playSTL),
toPerGame = mean(playTO),
astPerGame = mean(playAST),
ptsPerGame = mean(playPTS),
teamWins = sum(teamRslt == 'Win'),
# plusMinus = mean(playPTS[teamRslt== 'Win']) - mean(playPTS[teamRslt=='Loss']),
mvpScore = (blkPerGame * 1.0) + (stlPerGame * 2.3) + (trbPerGame * 1.0)+ (astPerGame * 1.2)
+ (ptsPerGame * 2.0)+ (toPerGame * -1.2) + (teamWins * 0.3)) %>%
select(playDispNm, blkPerGame, trbPerGame, stlPerGame, toPerGame, astPerGame, ptsPerGame,
teamWins, mvpScore) %>%
slice(1) %>%
arrange(-mvpScore)
mvpPredictions[1:20,]
library(tidyverse)
teamBox = read.csv('nba-enhanced-stats/2016-17_teamBoxScore.csv')
playerBox17 = read.csv('nba-enhanced-stats/2016-17_playerBoxScore.csv')
playerBox18 = read.csv('nba-enhanced-stats/2017-18_playerBoxScore.csv')
mvpPredictions = playerBox18 %>%
group_by(playDispNm) %>%
mutate(blkPerGame = mean(playBLK),
trbPerGame = mean(playTRB),
stlPerGame = mean(playSTL),
toPerGame = mean(playTO),
astPerGame = mean(playAST),
ptsPerGame = mean(playPTS),
teamWins = sum(teamRslt == 'Win'),
# plusMinus = mean(playPTS[teamRslt== 'Win']) - mean(playPTS[teamRslt=='Loss']),
mvpScore = (blkPerGame * 1.0) + (stlPerGame * 2.3) + (trbPerGame * 1.0)+ (astPerGame * 1.2)
+ (ptsPerGame * 2.0)+ (toPerGame * -1.2) + (teamWins * 0.3)) %>%
select(playDispNm, blkPerGame, trbPerGame, stlPerGame, toPerGame, astPerGame, ptsPerGame,
teamWins, mvpScore) %>%
slice(1) %>%
arrange(-mvpScore)
playerstats18 = playerBox18 %>%
group_by(playDispNm) %>%
mutate(blkPerGame = mean(playBLK),
trbPerGame = mean(playTRB),
stlPerGame = mean(playSTL),
toPerGame = mean(playTO),
astPerGame = mean(playAST),
ptsPerGame = mean(playPTS),
teamWins = sum(teamRslt == 'Win'),
# plusMinus = mean(playPTS[teamRslt== 'Win']) - mean(playPTS[teamRslt=='Loss']),
mvpScore = (blkPerGame * 1.0) + (stlPerGame * 2.3) + (trbPerGame * 1.0)+ (astPerGame * 1.2)
+ (ptsPerGame * 2.0)+ (toPerGame * -1.2) + (teamWins * 0.3)) %>%
select(playDispNm, blkPerGame, trbPerGame, stlPerGame, toPerGame, astPerGame, ptsPerGame,
teamWins, mvpScore) %>%
slice(1) %>%
arrange(-mvpScore)
View(playerstats18)
write.csv(playersStats18,"playersStats18.csv")
playerstats18 = playerBox18 %>%
group_by(playDispNm) %>%
mutate(blkPerGame = mean(playBLK),
trbPerGame = mean(playTRB),
stlPerGame = mean(playSTL),
toPerGame = mean(playTO),
astPerGame = mean(playAST),
ptsPerGame = mean(playPTS),
teamWins = sum(teamRslt == 'Win'),
# plusMinus = mean(playPTS[teamRslt== 'Win']) - mean(playPTS[teamRslt=='Loss']),
mvpScore = (blkPerGame * 1.0) + (stlPerGame * 2.3) + (trbPerGame * 1.0)+ (astPerGame * 1.2)
+ (ptsPerGame * 2.0)+ (toPerGame * -1.2) + (teamWins * 0.3)) %>%
select(playDispNm, blkPerGame, trbPerGame, stlPerGame, toPerGame, astPerGame, ptsPerGame,
teamWins, mvpScore) %>%
slice(1) %>%
arrange(-mvpScore)
write.csv(playersStats18,"playersstats18.csv")
write.csv(playersStats18,"playerstats18.csv")
write.csv(playerStats18,"playerstats18.csv")
write.csv(playerstats18,"playerstats18.csv")
library(caret)
library(dplyr)
mvpRanks = read.csv('All_player_data.csv')
allgames = read.csv('every_game.csv')
teamWins = allgames %>%
select(game_result, team_id, year_id, is_playoffs) %>%
filter(year_id >= 1989, is_playoffs == 0) %>%
group_by(team_id, year_id) %>%
mutate(Wins = sum(game_result == 'W')) %>%
distinct(team_id, year_id, Wins)
mvpRanks = left_join(mvpRanks, teamWins, c("Tm_x" = "team_id", "season_end" = "year_id"))
topPlayers = mvpRanks %>%
filter((PS.G >= 20 & OBPM >= 0 & DBPM >= 0) | MVP == 1,  season_end < 2012) %>%
group_by(season_end) %>%
top_n(5) %>%
select(player, MVP, GS, PS.G, TRB, AST, STL, BLK, TOV, OBPM, DBPM, Wins)
topPlayersTest = mvpRanks %>%
filter((PS.G >= 20 & OBPM >= 0 & DBPM >= 0) | MVP == 1,  season_end >= 2012) %>%
group_by(season_end) %>%
top_n(5) %>%
select(player, MVP, GS, PS.G, TRB, AST, STL, BLK, TOV, OBPM, DBPM, Wins)
allPlayersTrain = mvpRanks %>%
filter(season_end < 2012) %>%
group_by(season_end) %>%
select(player, MVP, GS, PS.G, TRB, AST, STL, BLK, TOV, OBPM, DBPM, Wins)
allPlayersTest = mvpRanks %>%
filter(season_end >= 2012) %>%
group_by(season_end) %>%
select(player, MVP, GS, PS.G, TRB, AST, STL, BLK, TOV, OBPM, DBPM, Wins)
playerstats18 <- read.csv("playerstats18.csv")
playerstats18
playerstats18 <- playerstats18[-1,1:20]
playerstats18 <- read.csv("playerstats18.csv")
playerstats18 <- playerstats18[1:20,-1]
mvp_glm <- glm(MVP ~ GS + PS.G + TRB + AST + STL + BLK + TOV + OBPM + DBPM, data = topPlayers, family = binomial)
summary(mvp_glm)
topPlayers$mvp_glm <- predict(mvp_glm, topPlayers[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM')], type="response")
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,15] <- ifelse(topPlayers[value+j,14]==
max(topPlayers[(value):(value+c[match(value,b)]),14]),
1,0)
}
}
m1cm <- table(topPlayers$MVP,topPlayers$V15)
m1error <- (m1cm[1,2]+m1cm[2,1])/(sum(m1cm[,1])+sum(m1cm[,2]))
m1cm
m1error
mvp_glm.test = predict(mvp_glm, topPlayersTest[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM')], type="response")
topPlayersTest$mvp_glm_test <- mvp_glm.test
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,15] <- ifelse(topPlayersTest[value+j,14]==
max(topPlayersTest[(value):(value+c[match(value,b)]),14]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V15)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m1 <- predict(mvp_glm, playerstats18[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM')], type="response")
mvp_glm <- glm(MVP ~ PS.G + AST + STL + DBPM, data = allPlayersTrain, family = binomial)
summary(mvp_glm)
allPlayersTrain$mvp_glm <- predict(mvp_glm,
allPlayersTrain[, c('PS.G','AST', 'STL', 'DBPM')],
type="response")
a <- c(data.frame(table(allPlayersTrain$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
allPlayersTrain[value+j,15] <- ifelse(allPlayersTrain[value+j,14]==max(allPlayersTrain[(value):(value+c[match(value,b)]),14]),
1,0)
}
}
allPlayersTrain <- allPlayersTrain[1:9830,]
cm <- table(allPlayersTrain$MVP,allPlayersTrain$V15)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
allPlayersTest$mvp_glm_test <- predict(mvp_glm, allPlayersTest[, c('PS.G','AST', 'STL', 'DBPM')], type="response")
a <- c(data.frame(table(allPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
allPlayersTest[value+j,15] <- ifelse(allPlayersTest[value+j,14]==max(allPlayersTest[(value):(value+c[match(value,b)]),14]),
1,0)
}
}
cm <- table(allPlayersTest$MVP,allPlayersTest$V15)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m2 <- predict(mvp_glm, playerstats18[, c('PS.G','AST', 'STL', 'DBPM')], type="response")
mvp_glm <- glm(MVP ~ PS.G + AST + STL + DBPM, data = topPlayers, family = binomial)
summary(mvp_glm)
topPlayers$mvp_glm_m3 <- predict(mvp_glm, topPlayers[, c('PS.G','AST', 'STL', 'DBPM')], type="response")
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,17] <- ifelse(topPlayers[value+j,16]==max(topPlayers[(value):(value+c[match(value,b)]),16]),
1,0)
}
}
m1cm <- table(topPlayers$MVP,topPlayers$V17)
m1error <- (m1cm[1,2]+m1cm[2,1])/(sum(m1cm[,1])+sum(m1cm[,2]))
m1cm
m1error
mvp_glm.test = predict(mvp_glm, topPlayersTest[, c('PS.G','AST', 'STL', 'DBPM')], type="response")
topPlayersTest$mvp_glm_test_m3 <- mvp_glm.test
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,17] <- ifelse(topPlayersTest[value+j,16]==max(topPlayersTest[(value):(value+c[match(value,b)]),16]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V17)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m3 <- predict(mvp_glm, playerstats18[, c('PS.G','AST', 'STL', 'DBPM')], type="response")
mvp_glm <- glm(MVP ~ GS + PS.G + TRB + AST + STL + BLK + TOV + OBPM + DBPM + Wins, data = topPlayers, family = binomial)
summary(mvp_glm)
topPlayers$mvp_glm_3 <- predict(mvp_glm, topPlayers[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM', 'Wins')], type="response")
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,19] <- ifelse(topPlayers[value+j,18]==
max(topPlayers[(value):(value+c[match(value,b)]),18]),
1,0)
}
}
m1cm <- table(topPlayers$MVP,topPlayers$V19)
m1error <- (m1cm[1,2]+m1cm[2,1])/(sum(m1cm[,1])+sum(m1cm[,2]))
m1cm
m1error
mvp_glm.test = predict(mvp_glm, topPlayersTest[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM','Wins')], type="response")
topPlayersTest$mvp_glm_test3 <- mvp_glm.test
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,19] <- ifelse(topPlayersTest[value+j,18]==max(topPlayersTest[(value):(value+c[match(value,b)]),18]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V19)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m4 <- predict(mvp_glm, playerstats18[, c('GS', 'PS.G', 'TRB', 'AST', 'STL',
'BLK', 'TOV', 'OBPM', 'DBPM', 'Wins')],
type="response")
mvp_glm <- glm(MVP ~ PS.G + AST + Wins, data = allPlayersTrain, family = binomial)
summary(mvp_glm)
allPlayersTrain$mvp_glm5 <- predict(mvp_glm,
allPlayersTrain[, c('PS.G','AST','Wins')],
type="response")
allPlayersTrain$mvp_glm5[is.na(allPlayersTrain$mvp_glm5)]<- 0
a <- c(data.frame(table(allPlayersTrain$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
allPlayersTrain[value+j,17] <- ifelse(allPlayersTrain[value+j,16]==max(allPlayersTrain[(value):(value+c[match(value,b)]),16]),
1,0)
}
}
cm <- table(allPlayersTrain$MVP,allPlayersTrain$V17)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
allPlayersTest$mvp_glm_test5 <- predict(mvp_glm, allPlayersTest[, c('PS.G','AST', 'Wins')], type="response")
allPlayersTest$mvp_glm_test5[is.na(allPlayersTest$mvp_glm_test5)]<- 0
a <- c(data.frame(table(allPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
allPlayersTest[value+j,17] <- ifelse(allPlayersTest[value+j,16]==max(allPlayersTest[(value):(value+c[match(value,b)]),16]),
1,0)
}
}
cm <- table(allPlayersTest$MVP,allPlayersTest$V17)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m5 <- predict(mvp_glm, playerstats18[, c('PS.G','AST', 'Wins')],
type="response")
mvp_glm <- glm(MVP ~ PS.G + AST + Wins, data = topPlayers, family = binomial)
summary(mvp_glm)
topPlayers$mvp_glm6 <- predict(mvp_glm,
topPlayers[, c('PS.G','AST','Wins')],
type="response")
topPlayers$mvp_glm6[is.na(topPlayers$mvp_glm6)]<- 0
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,21] <- ifelse(topPlayers[value+j,20]==max(topPlayers[(value):(value+c[match(value,b)]),20]),
1,0)
}
}
cm <- table(topPlayers$MVP,topPlayers$V21)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
topPlayersTest$mvp_glm_test6 <- predict(mvp_glm, topPlayersTest[, c('PS.G','AST', 'Wins')], type="response")
topPlayersTest$mvp_glm_test6[is.na(topPlayersTest$mvp_glm_test6)]<- 0
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,21] <- ifelse(topPlayersTest[value+j,20]==max(topPlayersTest[(value):(value+c[match(value,b)]),20]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V21)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m6 <- predict(mvp_glm, playerstats18[, c('PS.G','AST', 'Wins')],
type="response")
library(randomForest)
mvp_ranForest <- randomForest(MVP ~ GS + PS.G + TRB + AST + STL + BLK + TOV +
OBPM + DBPM + Wins, data = topPlayers)
summary(mvp_ranForest)
topPlayers$mvp_rf <- predict(mvp_ranForest, topPlayers[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM', 'Wins')], type="response")
a <- c(data.frame(table(topPlayers$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-24]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayers[value+j,23] <- ifelse(topPlayers[value+j,22]==
max(topPlayers[(value):(value+c[match(value,b)]),22]),
1,0)
}
}
m1cm <- table(topPlayers$MVP,topPlayers$V23)
m1error <- (m1cm[1,2]+m1cm[2,1])/(sum(m1cm[,1])+sum(m1cm[,2]))
m1cm
m1error
mvp_glm.test = predict(mvp_ranForest, topPlayersTest[, c('GS', 'PS.G', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'OBPM', 'DBPM','Wins')], type="response")
topPlayersTest$rftest <- mvp_glm.test
a <- c(data.frame(table(topPlayersTest$season_end))[,2])
b <- c(1,a)
for (i in 2:length(b)) b[i] <- b[i-1]+b[i]
b <- b[-5]
c <- a-1
for (value in b){
for (j in 0:c[match(value,b)]){
topPlayersTest[value+j,23] <- ifelse(topPlayersTest[value+j,22]==max(topPlayersTest[(value):(value+c[match(value,b)]),22]),
1,0)
}
}
cm <- table(topPlayersTest$MVP,topPlayersTest$V23)
error <- (cm[1,2]+cm[2,1])/(sum(cm[,1])+sum(cm[,2]))
cm
error
playerstats18$m7 <- predict(mvp_glm, playerstats18[, c('GS', 'PS.G', 'TRB', 'AST',
'STL', 'BLK', 'TOV', 'OBPM', 'DBPM','Wins')],
type="response")
max(playerstats18$m1)
max(playerstats18$m2)
max(playerstats18$m3)
max(playerstats18$m4)
max(playerstats18$m5)
max(playerstats18$m6)
max(playerstats18$m7)
View(mvpByMethod1)
View(allPlayersTrain)
allPlayersTrain[allPlayersTrain$V15,]
allPlayersTrain[allPlayersTrain$V15==1,]
View(allPlayersTrain)
